version: "3"
services:
  redis:
    image: redis:alpine
    ports:
      - "6379"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  ethnode:
    build:
      context: ./
      dockerfile: Dockerfile.testrpc
    ports:
      - "8545"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  ingest:
    build:
      context: ./
      dockerfile: Dockerfile.ingest
    ports:
      - "8080"
    command: ["/ingest", "${REDIS_HOST:-redis:6379}"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  fundcheckrelay:
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    command: ["/fundcheckrelay", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_STATE_NODE:-http://ethnode:8545}", "queue://ingest", "topic://instant"]
    depends_on:
      - redis
      - ethnode
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  simplerelay:
    build:
      context: ./
      dockerfile: Dockerfile.simplerelay
    command: ["/simplerelay", "${REDIS_HOST:-redis:6379}", "topic://instant", "queue://delay1"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  delayrelay1:
    build:
      context: ./
      dockerfile: Dockerfile.delayrelay
    command: ["/delayrelay", "${REDIS_HOST:-redis:6379}", "queue://delay1", "queue://delay2", "queue://delay1trigger"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  delayrelay2:
    build:
      context: ./
      dockerfile: Dockerfile.delayrelay
    command: ["/delayrelay", "${REDIS_HOST:-redis:6379}", "queue://delay2", "topic://released", "topic://newblocks", "queue://delay1trigger"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  blockmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.blockmonitor
    command: ["./node_modules/.bin/truffle", "exec", "blockMonitor.js", "redis://${REDIS_HOST:-redis:6379}", "topic://newblocks", "--network", "testnet"]
    depends_on:
      - redis
      - ethnode
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  simplerelay2:
    build:
      context: ./
      dockerfile: Dockerfile.simplerelay
    command: ["/simplerelay", "${REDIS_HOST:-redis:6379}", "topic://released", "queue://indexer"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  # TODO: Add second fund verifier here
  initialize:
    build:
      context: ./
      dockerfile: Dockerfile.initialize
    command: ["/initialize", "${REDIS_HOST:-redis:6379}", "${ZRX_FEE:-500000000000000000}", "${RELAY_ADDRESS:-C22d5b2951DB72B44CFb8089bb8CD374A3c354eA}"]
    depends_on:
      - redis
  contractinit:
    build:
      context: ./
      dockerfile: Dockerfile.testinit
    command: ["/project/setup.sh", "redis://${REDIS_HOST:-redis:6379}"]
    depends_on:
      - redis
  entrypoint:
    build:
      context: ./
      dockerfile: Dockerfile.testinit
    volumes:
      - "./js:/project"
    command: ["node", "/project/hang.js"]
  dynamo:
    image: cnadiminti/dynamodb-local
  indexer:
    build:
      context: ./
      dockerfile: Dockerfile.indexer
    environment:
      DYNAMODB_HOST: http://dynamo:8000
      AWS_ACCESS_KEY_ID: x
      AWS_SECRET_ACCESS_KEY: x
    command: ["python", "/project/indexer.py", "${REDIS_HOST:-redis:6379}", "indexer", "--create"]
    depends_on:
      - dynamo
  api:
    build:
      context: ./
      dockerfile: Dockerfile.searchapi
    environment:
      DYNAMODB_HOST: http://dynamo:8000
      AWS_ACCESS_KEY_ID: x
      AWS_SECRET_ACCESS_KEY: x
    command: ["python", "/project/api.py"]
