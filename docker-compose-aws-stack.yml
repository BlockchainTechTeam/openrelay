version: "3"
services:
  ingest:
    build:
      context: ./
      dockerfile: Dockerfile.ingest
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-ingest
    logging:
      driver: awslogs
      options:
        awslogs-group: ingest
        # awslogs-create-group: "true"
    ports:
      - "8080:8080"
    command: ["/ingest", "${REDIS_HOST:-redis:6379}", "C22d5b2951DB72B44CFb8089bb8CD374A3c354eA"]
    deploy:
      mode: global
      # endpoint_mode: dnsrr
      placement:
        constraints:
          - engine.labels.enginetype == External

  fillupdate:
    build:
      context: ./
      dockerfile: Dockerfile.fillupdate
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-fillupdate
    logging:
      driver: awslogs
      options:
        awslogs-group: fillupdate
        # awslogs-create-group: "true"
    command: ["/fillupdate", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_URL:-http://state-haproxy:8545}", "queue://ingest", "queue://fundcheck"]
    deploy:
      mode: global
      # endpoint_mode: dnsrr
      placement:
        constraints:
          - engine.labels.enginetype == Internal

  fundcheckrelay:
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-fundcheckrelay
    logging:
      driver: awslogs
      options:
        awslogs-group: fundcheckrelay
        # awslogs-create-group: "true"
    command: ["/fundcheckrelay", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_URL:-http://state-haproxy:8545}", "queue://fundcheck", "queue://delay1", "topic://instant-broadcast"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  delayrelay1:
    build:
      context: ./
      dockerfile: Dockerfile.delayrelay
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-delayrelay
    logging:
      driver: awslogs
      options:
        awslogs-group: delayrelay1
        # awslogs-create-group: "true"
    command: ["/delayrelay", "${REDIS_HOST:-redis:6379}", "queue://delay1", "queue://delay2", "topic://delay1trigger"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  delayrelay2:
    build:
      context: ./
      dockerfile: Dockerfile.delayrelay
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-delayrelay
    logging:
      driver: awslogs
      options:
        awslogs-group: delayrelay2
        # awslogs-create-group: "true"
    command: ["/delayrelay", "${REDIS_HOST:-redis:6379}", "queue://delay2", "queue://released", "topic://newblocks", "topic://delay1trigger"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  blockmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.blockmonitor
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-blockmonitor
    logging:
      driver: awslogs
      options:
        awslogs-group: blockmonitor
        # awslogs-create-group: "true"
    command: ["./node_modules/.bin/truffle", "exec", "blockMonitor.js", "redis://${REDIS_HOST:-redis:6379}", "topic://newblocks", "--network", "main"]
    environment:
      ETHEREUM_URL: "${ETHEREUM_URL:-http://ethnode:8545}"
      USE_FILTER_PROVIDER: "1"
    deploy:
      replicas: 1
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  exchangemonitor:
    build:
      context: ./
      dockerfile: Dockerfile.fillmonitor
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-fillmonitor
    logging:
      driver: awslogs
      options:
        awslogs-group: fillmonitor
        # awslogs-create-group: "true"
    command: ["./node_modules/.bin/truffle", "exec", "exchangeMonitor.js", "redis://${REDIS_HOST:-redis:6379}", "queue://ordersfilled", "0xC22d5b2951DB72B44CFb8089bb8CD374A3c354eA", "--network", "main"]
    environment:
      ETHEREUM_URL: "${ETHEREUM_URL:-http://ethnode:8545}"
      USE_FILTER_PROVIDER: "1"
    deploy:
      replicas: 1
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  fillindexer:
    build:
      context: ./
      dockerfile: Dockerfile.fillindexer
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-fillindexer
    logging:
      driver: awslogs
      options:
        awslogs-group: fillindexer
        # awslogs-create-group: "true"
    command: ["python", "/project/fill_indexer.py", "${REDIS_HOST:-redis:6379}", "ordersfilled"]
    environment:
      ORDER_TABLE_NAME: ${ORDER_TABLE_NAME:-Order}
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  simplerelay2:
    build:
      context: ./
      dockerfile: Dockerfile.simplerelay
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-simplerelay
    logging:
      driver: awslogs
      options:
        awslogs-group: simplerelay2
        # awslogs-create-group: "true"
    command: ["/simplerelay", "${REDIS_HOST:-redis:6379}", "queue://released", "queue://recheck", "topic://released-broadcast"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  fillupdate2:
    build:
      context: ./
      dockerfile: Dockerfile.fillupdate
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-fillupdate
    logging:
      driver: awslogs
      options:
        awslogs-group: fillupdate2
        # awslogs-create-group: "true"
    command: ["/fillupdate", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_URL:-http://state-haproxy:8545}", "queue://recheck", "queue://recheck2"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  fundcheckrelay2:
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-fundcheckrelay
    logging:
      driver: awslogs
      options:
        awslogs-group: fundcheckrelay2
        # awslogs-create-group: "true"
    command: ["/fundcheckrelay", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_URL:-http://state-haproxy:8545}", "queue://recheck2", "queue://indexer"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  initialize:
    build:
      context: ./
      dockerfile: Dockerfile.initialize
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-initialize
    logging:
      driver: awslogs
      options:
        awslogs-group: initialize
        # awslogs-create-group: "true"
    command: ["/initialize", "${REDIS_HOST:-redis:6379}", "${ZRX_FEE:-500000000000000000}", "${RELAY_ADDRESS:-C22d5b2951DB72B44CFb8089bb8CD374A3c354eA}"]
    deploy:
      restart_policy:
        condition: none
  indexer:
    build:
      context: ./
      dockerfile: Dockerfile.indexer
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-indexer
    logging:
      driver: awslogs
      options:
        awslogs-group: indexer
        # awslogs-create-group: "true"
    command: ["python", "/project/indexer.py", "${REDIS_HOST:-redis:6379}", "indexer"]
    environment:
      ORDER_TABLE_NAME: ${ORDER_TABLE_NAME:-Order}
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  api:
    build:
      context: ./
      dockerfile: Dockerfile.searchapi
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-searchapi
    logging:
      driver: awslogs
      options:
        awslogs-group: searchapi
        # awslogs-create-group: "true"
    command: ["python", "/project/api.py", "${REDIS_HOST:-redis:6379}", "newblocks", "-l", "debug"]
    ports:
      - "8888:8888"
    environment:
      ORDER_TABLE_NAME: ${ORDER_TABLE_NAME:-Order}
    deploy:
      mode: global
      # endpoint_mode: dnsrr
      placement:
        constraints:
          - engine.labels.enginetype == External
  ordercheckenqueue:
    # This node uses dynamodb to continuously requeue orders to be checked
    # again on an ongoing basis
    build:
      context: ./
      dockerfile: Dockerfile.queueorders
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-queueorders
    logging:
      driver: awslogs
      options:
        awslogs-group: queueorders
        # awslogs-create-group: "true"
    environment:
      ORDER_TABLE_NAME: ${ORDER_TABLE_NAME:-Order}
    command: ["python", "/project/queue_orders.py", "${REDIS_HOST:-redis:6379}", "continuous_recheck", "-r"]
    deploy:
      replicas: 1
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  fillupdate_continous:
    # This node makes sure filled / cancelled values are up to date. Any
    # changes get forwarded to the indexer, and all orders get forwarded to the
    # inverted fund checker
    build:
      context: ./
      dockerfile: Dockerfile.fillupdate
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-fillupdate
    logging:
      driver: awslogs
      options:
        awslogs-group: fillupdate-continuous
        # awslogs-create-group: "true"
    command: ["/fillupdate", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_URL:-http://state-haproxy:8545}", "queue://continuous_recheck", "queue://fund_continuous_recheck", "queue://indexer"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  fundcheckrelay_continuous:
    # This fund checker passes on orders that have insufficient funds to be
    # removed from the index
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-fundcheckrelay
    logging:
      driver: awslogs
      options:
        awslogs-group: fundcheckrelay-continuous
        # awslogs-create-group: "true"
    command: ["/fundcheckrelay", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_URL:-http://state-haproxy:8545}", "queue://fund_continuous_recheck", "queue://unindexer", "--invert"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
  unindexer:
    build:
      context: ./
      dockerfile: Dockerfile.indexer
    image: 201322628656.dkr.ecr.us-east-2.amazonaws.com/openrelay-indexer
    logging:
      driver: awslogs
      options:
        awslogs-group: unindexer
        # awslogs-create-group: "true"
    environment:
      ORDER_TABLE_NAME: ${ORDER_TABLE_NAME:-Order}
    command: ["python", "/project/indexer.py", "${REDIS_HOST:-redis:6379}", "unindexer", "--unindex"]
    deploy:
      mode: global
      placement:
        constraints:
          - engine.labels.enginetype == Internal
